<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0" DefaultTargets="Build">
	<Import Project="$(MSBuildExtensionsPath)\MSBuildCommunityTasks\MSBuild.Community.Tasks.Targets"/>
    <PropertyGroup>
		<VisualStudio>$(MSBuildProgramFiles32)\Microsoft Visual Studio 10.0\</VisualStudio>
        <OutputDir>..\BuildOutput</OutputDir>
		<Configuration>x86</Configuration>	
		<ProductVersion>0.2.0</ProductVersion>
		<CompanyName>Reven</CompanyName>
		<ProductName>NextPVR Web Console</ProductName>
		<Copyright>Copyright Â© Reven 2013</Copyright>
		
		<SrcPath>..\</SrcPath>
    </PropertyGroup>

    <ItemGroup>
        <ProjectToBuild Include="..\NextPvrWebConsole.sln">
			<Properties>Configuration=SingleImage;Platform=Any CPU</Properties>
        </ProjectToBuild>
    </ItemGroup>
	
	<UsingTask TaskName="GitVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\..\v4.0.30319\Microsoft.Build.Tasks.v4.0.dll" >
		<ParameterGroup>
		  <LocalPath ParameterType="System.String" />
		  <Path ParameterType="System.String" />
		  <CommitCount ParameterType="System.Int32" Output="true" />
		</ParameterGroup>
		<Task>
		  <!--<Reference Include="" />-->
		  <Using Namespace="System"/>
		  <Using Namespace="System.Diagnostics"/>
		  <Code Type="Fragment" Language="cs">
			<![CDATA[
			  LocalPath = LocalPath ?? "..\\";
			  Path = Path ?? "master";
			  
			  string workingDir = new System.IO.DirectoryInfo(System.IO.Directory.GetCurrentDirectory()).Parent.FullName;
			  var psi = new ProcessStartInfo("cmd", "/c \"c:\\program files\\git\\bin\\git\" rev-list " + Path + " --count") {
				  UseShellExecute = false, 
				  ErrorDialog = false, 
				  CreateNoWindow = false, 
				  WorkingDirectory = workingDir,
				  RedirectStandardOutput = true,
				  RedirectStandardError = true
			  };
			  
			  string result;
			  using (var p = Process.Start(psi)) {
				p.WaitForExit();
				if (p.ExitCode != 0) {
				  using (var standardError = p.StandardError) {
					Log.LogError(standardError.ReadToEnd());
				  }
				  return false;
				}
	 
				using (var standardOutput = p.StandardOutput) {
				  CommitCount = Int32.Parse(standardOutput.ReadToEnd());
				}
			  }
			]]>
		  </Code>
		</Task>
	</UsingTask>
 
	<Target Name="CommitCount">
		<GitVersion Path="master">
		  <Output PropertyName="GitCommitCount" TaskParameter="CommitCount" />
		</GitVersion>

		<Message Text="Commit count: $(GitCommitCount)"/>
	</Target>
	
	<Target Name="SetVersion">
		<Message Text="Setting version..." />
		 
		<FileUpdate  
		   Files="../NextPvrWebConsole.InstallSheildLE.Setup/NextPvrWebConsole.InstallSheildLE.Setup.isl" 
		   Regex="ProductVersion&lt;/td&gt;&lt;td&gt;([\d]+\.)*[\d]*&lt;/td&gt;" 
		   ReplacementText="ProductVersion&lt;/td&gt;&lt;td&gt;$(ProductVersion).$(GitCommitCount)&lt;/td&gt;">
		</FileUpdate>
		
		<ItemGroup>
			<AssemblyInfoFiles Include="..\**\AssemblyInfo.cs"/>
		</ItemGroup>
		
        <Message Text="fullpath: @(AssemblyInfoFiles->'%(fullpath)')"/>
		<FileUpdate  
		   Files="@(AssemblyInfoFiles)" 
		   Regex="Version\(&quot;[^&quot;]*&quot;\)" 
		   ReplacementText="Version(&quot;$(ProductVersion).$(GitCommitCount)&quot;)">
		</FileUpdate>
		<FileUpdate  
		   Files="@(AssemblyInfoFiles)" 
		   Regex="AssemblyProduct\(&quot;[^&quot;]*&quot;\)" 
		   ReplacementText="AssemblyProduct(&quot;$(ProductName)&quot;)">
		</FileUpdate>
		<FileUpdate  
		   Files="@(AssemblyInfoFiles)" 
		   Regex="AssemblyCompany\(&quot;[^&quot;]*&quot;\)" 
		   ReplacementText="AssemblyCompany(&quot;$(CompanyName)&quot;)">
		</FileUpdate>
		<FileUpdate  
		   Files="@(AssemblyInfoFiles)" 
		   Regex="AssemblyCopyright\(&quot;[^&quot;]*&quot;\)" 
		   ReplacementText="AssemblyCopyright(&quot;$(Copyright)&quot;)">
		</FileUpdate>
	</Target>

    <Target Name="Build" DependsOnTargets="CommitCount;SetVersion">
	
		<Message Text="Building Solution..." />
        <MSBuild Projects="@(ProjectToBuild)"/>
		
		<Message Text="Renaming Setup.exe..." />
		<Move SourceFiles="..\NextPvrWebConsole.InstallSheildLE.Setup\NextPvrWebConsole.InstallSheildLE.Setup\Express\SingleImage\DiskImages\DISK1\setup.exe" 
			  DestinationFiles="..\NextPvrWebConsole.InstallSheildLE.Setup\NextPvrWebConsole.InstallSheildLE.Setup\Express\SingleImage\DiskImages\DISK1\NextPVRWebConsole-$(ProductVersion).$(GitCommitCount).exe" />
   </Target>
	
</Project>